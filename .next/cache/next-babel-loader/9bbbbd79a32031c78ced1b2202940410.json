{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/home/xlugo/Escritorio/podcasts/pages/channel.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\nimport Error from './_error';\nexport default class extends React.Component {\n  static async getInitialProps({\n    query,\n    res\n  }) {\n    let idChannel = query.id;\n\n    try {\n      let [reqChannel, reqSeries, reqAudios] = await _Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)]);\n\n      if (reqChannel.status >= 404) {\n        res.statusCode = reqChannel.status;\n        return {\n          channel: null,\n          audioClips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      }\n\n      let dataChannel = await reqChannel.json();\n      let channel = dataChannel.body.channel;\n      let dataAudios = await reqAudios.json();\n      let audioClips = dataAudios.body.audio_clips;\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n      return {\n        channel,\n        audioClips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n\n    if (statusCode !== 200) {\n      return __jsx(Error, {\n        statusCode: statusCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(Layout, {\n      title: channel.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        backgroundImage: `url(${channel.urls.banner_image.original})`\n      },\n      className: \"jsx-3795240066\" + \" \" + \"banner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), __jsx(\"h1\", {\n      className: \"jsx-3795240066\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, channel.title), series.length > 0 && __jsx(\"div\", {\n      className: \"jsx-3795240066\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      className: \"jsx-3795240066\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Series\"), __jsx(ChannelGrid, {\n      channels: series,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), __jsx(\"h2\", {\n      className: \"jsx-3795240066\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Ultimos Podcasts\"), __jsx(PodcastList, {\n      podcasts: audioClips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), __jsx(_JSXStyle, {\n      id: \"3795240066\",\n      __self: this\n    }, \".banner.jsx-3795240066{width:100%;padding-bottom:25%;background-position:50% 50%;background-size:cover;background-color:#aaa;}h1.jsx-3795240066{font-weight:600;padding:15px;}h2.jsx-3795240066{padding:15px;font-size:1.2em;font-weight:600;margin:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3hsdWdvL0VzY3JpdG9yaW8vcG9kY2FzdHMvcGFnZXMvY2hhbm5lbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzRW9CLEFBR3dCLEFBT0ssQUFJSCxXQVZNLEVBV0gsR0FKSCxhQUNmLEFBSWtCLENBWFksZUFZbkIsU0FDWCxJQVp3QixzQkFDQSxzQkFDeEIiLCJmaWxlIjoiL2hvbWUveGx1Z28vRXNjcml0b3Jpby9wb2RjYXN0cy9wYWdlcy9jaGFubmVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdpc29tb3JwaGljLWZldGNoJztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vY29tcG9uZW50cy9MYXlvdXQnO1xuaW1wb3J0IENoYW5uZWxHcmlkIGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhbm5lbEdyaWQnO1xuaW1wb3J0IFBvZGNhc3RMaXN0IGZyb20gJy4uL2NvbXBvbmVudHMvUG9kY2FzdExpc3QnO1xuaW1wb3J0IEVycm9yIGZyb20gJy4vX2Vycm9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgYXN5bmMgZ2V0SW5pdGlhbFByb3BzKHsgcXVlcnksIHJlcyB9KSB7XG4gICAgbGV0IGlkQ2hhbm5lbCA9IHF1ZXJ5LmlkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBbcmVxQ2hhbm5lbCwgcmVxU2VyaWVzLCByZXFBdWRpb3NdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBmZXRjaChgaHR0cHM6Ly9hcGkuYXVkaW9ib29tLmNvbS9jaGFubmVscy8ke2lkQ2hhbm5lbH1gKSxcbiAgICAgICAgZmV0Y2goYGh0dHBzOi8vYXBpLmF1ZGlvYm9vbS5jb20vY2hhbm5lbHMvJHtpZENoYW5uZWx9L2NoaWxkX2NoYW5uZWxzYCksXG4gICAgICAgIGZldGNoKGBodHRwczovL2FwaS5hdWRpb2Jvb20uY29tL2NoYW5uZWxzLyR7aWRDaGFubmVsfS9hdWRpb19jbGlwc2ApXG4gICAgICBdKTtcblxuICAgICAgaWYgKHJlcUNoYW5uZWwuc3RhdHVzID49IDQwNCkge1xuICAgICAgICByZXMuc3RhdHVzQ29kZSA9IHJlcUNoYW5uZWwuc3RhdHVzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoYW5uZWw6IG51bGwsXG4gICAgICAgICAgYXVkaW9DbGlwczogbnVsbCxcbiAgICAgICAgICBzZXJpZXM6IG51bGwsXG4gICAgICAgICAgc3RhdHVzQ29kZTogcmVxQ2hhbm5lbC5zdGF0dXNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbGV0IGRhdGFDaGFubmVsID0gYXdhaXQgcmVxQ2hhbm5lbC5qc29uKCk7XG4gICAgICBsZXQgY2hhbm5lbCA9IGRhdGFDaGFubmVsLmJvZHkuY2hhbm5lbDtcblxuICAgICAgbGV0IGRhdGFBdWRpb3MgPSBhd2FpdCByZXFBdWRpb3MuanNvbigpO1xuICAgICAgbGV0IGF1ZGlvQ2xpcHMgPSBkYXRhQXVkaW9zLmJvZHkuYXVkaW9fY2xpcHM7XG5cbiAgICAgIGxldCBkYXRhU2VyaWVzID0gYXdhaXQgcmVxU2VyaWVzLmpzb24oKTtcbiAgICAgIGxldCBzZXJpZXMgPSBkYXRhU2VyaWVzLmJvZHkuY2hhbm5lbHM7XG5cbiAgICAgIHJldHVybiB7IGNoYW5uZWwsIGF1ZGlvQ2xpcHMsIHNlcmllcywgc3RhdHVzQ29kZTogMjAwIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHsgY2hhbm5lbDogbnVsbCwgYXVkaW9DbGlwczogbnVsbCwgc2VyaWVzOiBudWxsLCBzdGF0dXNDb2RlOiA1MDMgfTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGFubmVsLCBhdWRpb0NsaXBzLCBzZXJpZXMsIHN0YXR1c0NvZGUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICByZXR1cm4gPEVycm9yIHN0YXR1c0NvZGU9e3N0YXR1c0NvZGV9IC8+O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8TGF5b3V0IHRpdGxlPXtjaGFubmVsLnRpdGxlfT5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImJhbm5lclwiXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke2NoYW5uZWwudXJscy5iYW5uZXJfaW1hZ2Uub3JpZ2luYWx9KWBcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuXG4gICAgICAgIDxoMT57Y2hhbm5lbC50aXRsZX08L2gxPlxuXG4gICAgICAgIHtzZXJpZXMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxoMj5TZXJpZXM8L2gyPlxuICAgICAgICAgICAgPENoYW5uZWxHcmlkIGNoYW5uZWxzPXtzZXJpZXN9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG5cbiAgICAgICAgPGgyPlVsdGltb3MgUG9kY2FzdHM8L2gyPlxuICAgICAgICA8UG9kY2FzdExpc3QgcG9kY2FzdHM9e2F1ZGlvQ2xpcHN9IC8+XG5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5iYW5uZXIge1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjUlO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlIDUwJTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWFhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICAgcGFkZGluZzogMTVweDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaDIge1xuICAgICAgICAgICAgcGFkZGluZzogMTVweDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9MYXlvdXQ+XG4gICAgKTtcbiAgfVxufVxuIl19 */\\n/*@ sourceURL=/home/xlugo/Escritorio/podcasts/pages/channel.js */\"));\n  }\n\n}","map":{"version":3,"sources":["/home/xlugo/Escritorio/podcasts/pages/channel.js"],"names":["Layout","ChannelGrid","PodcastList","Error","React","Component","getInitialProps","query","res","idChannel","id","reqChannel","reqSeries","reqAudios","all","fetch","status","statusCode","channel","audioClips","series","dataChannel","json","body","dataAudios","audio_clips","dataSeries","channels","e","render","props","title","backgroundImage","urls","banner_image","original","length"],"mappings":"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","sourcesContent":["import 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\nimport Error from './_error';\n\nexport default class extends React.Component {\n  static async getInitialProps({ query, res }) {\n    let idChannel = query.id;\n\n    try {\n      let [reqChannel, reqSeries, reqAudios] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\n      ]);\n\n      if (reqChannel.status >= 404) {\n        res.statusCode = reqChannel.status;\n        return {\n          channel: null,\n          audioClips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      }\n\n      let dataChannel = await reqChannel.json();\n      let channel = dataChannel.body.channel;\n\n      let dataAudios = await reqAudios.json();\n      let audioClips = dataAudios.body.audio_clips;\n\n      let dataSeries = await reqSeries.json();\n      let series = dataSeries.body.channels;\n\n      return { channel, audioClips, series, statusCode: 200 };\n    } catch (e) {\n      return { channel: null, audioClips: null, series: null, statusCode: 503 };\n    }\n  }\n\n  render() {\n    const { channel, audioClips, series, statusCode } = this.props;\n\n    if (statusCode !== 200) {\n      return <Error statusCode={statusCode} />;\n    }\n\n    return (\n      <Layout title={channel.title}>\n        <div\n          className=\"banner\"\n          style={{\n            backgroundImage: `url(${channel.urls.banner_image.original})`\n          }}\n        />\n\n        <h1>{channel.title}</h1>\n\n        {series.length > 0 && (\n          <div>\n            <h2>Series</h2>\n            <ChannelGrid channels={series} />\n          </div>\n        )}\n\n        <h2>Ultimos Podcasts</h2>\n        <PodcastList podcasts={audioClips} />\n\n        <style jsx>{`\n          .banner {\n            width: 100%;\n            padding-bottom: 25%;\n            background-position: 50% 50%;\n            background-size: cover;\n            background-color: #aaa;\n          }\n          h1 {\n            font-weight: 600;\n            padding: 15px;\n          }\n          h2 {\n            padding: 15px;\n            font-size: 1.2em;\n            font-weight: 600;\n            margin: 0;\n          }\n        `}</style>\n      </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}